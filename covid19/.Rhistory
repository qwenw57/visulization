library(usmap)
library(rgdal)
library(sp)
library(gridExtra)
library(deSolve)
###################################
## Must update with data refresh ##
###################################
# This variable is referenced through the code, I found that the most recent data provided wasn't always complete
# therefore, setting this date will adjust the graphs and subsets throughout to use the most complete data availible
#---------------------------------------------------------------------------------------------DATE UPDATE
latest_date <- list(as.Date('2020-04-15'))
# Setting these colors for use in the formattable table below
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
customRed = "#ff7f7f"
customYel = "#C9C271"
#---------------------------------------------------------------------------------------------DATA LOAD STEP
#data <- read_csv("covid_19_data.csv")
data <- read_csv("~/Dropbox/ECON631/project_coronovirus/covid_19_data.csv")
#death.save <- read_csv("time_series_covid_19_deaths.csv")
#data.save <- read_csv("time_series_covid_19_confirmed.csv")
#us.data.save <- read_csv("time_series_covid_19_confirmed_US.csv")
#us.death.save <- read_csv("time_series_covid_19_deaths_US.csv")
data.save <- read_csv("~/Dropbox/ECON631/time_series_covid19_confirmed_global.csv")
library(tidyverse)
library(lubridate)
library(reshape2)
library(viridis)
library(ggthemes)
library(plotly)
library(maps)
library(formattable)
library(directlabels)
library(leaflet)
library(scales)
library(usmap)
library(rgdal)
library(sp)
library(gridExtra)
library(deSolve)
###################################
## Must update with data refresh ##
###################################
# This variable is referenced through the code, I found that the most recent data provided wasn't always complete
# therefore, setting this date will adjust the graphs and subsets throughout to use the most complete data availible
#---------------------------------------------------------------------------------------------DATE UPDATE
latest_date <- list(as.Date('2020-04-15'))
# Setting these colors for use in the formattable table below
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
customRed = "#ff7f7f"
customYel = "#C9C271"
#---------------------------------------------------------------------------------------------DATA LOAD STEP
#data <- read_csv("covid_19_data.csv")
data <- read_csv("~/Dropbox/ECON631/project_coronovirus/covid_19_data.csv")
#death.save <- read_csv("time_series_covid_19_deaths.csv")
#data.save <- read_csv("time_series_covid_19_confirmed.csv")
#us.data.save <- read_csv("time_series_covid_19_confirmed_US.csv")
#us.death.save <- read_csv("time_series_covid_19_deaths_US.csv")
data.save <- read_csv("~/Dropbox/ECON631/project_coronovirus/time_series_covid19_confirmed_global.csv")
death.save <- read_csv("~/Dropbox/ECON631/project_coronovirus/time_series_covid19_deaths_global.csv")
#
# us.data.save <- read_csv("../input/novel-corona-virus-2019-dataset/time_series_covid_19_confirmed_US.csv")
# us.death.save <- read_csv("../input/novel-corona-virus-2019-dataset/time_series_covid_19_deaths_US.csv")
# Sorry for the spaghetti code here, the data souces have changed a few times and this is getting out of control.
# Had an interesting time trying to subset the last column in a data set "if it looks stupid, but it works, it aint stupid..."
death.recent <- death.save[,c("Province/State","Country/Region","Lat","Long")]
lastcol <- death.save[tail(names(death.save), 1)]
colnames(lastcol)[1] <- "count"
death.recent$count <- lastcol$count
# repeating the same steps for the other data
data.recent <- data.save[,c("Province/State","Country/Region","Lat","Long")]
lastcol <- data.save[tail(names(data.save), 1)]
colnames(lastcol)[1] <- "count"
data.recent$count <- lastcol$count
# # Repeating again for the us death data
# us.death <- us.death.save[,c("Province_State")]
# lastcol <- us.death.save[tail(names(us.death.save), 1)]
# colnames(lastcol)[1] <- "count"
# us.death$count <- lastcol$count
#
# # Repeating again for the us data
# us.data <- us.data.save[,c("Province_State")]
# lastcol <- us.data.save[tail(names(us.data.save), 1)]
# colnames(lastcol)[1] <- "count"
# us.data$count <- lastcol$count
#---------------------------------------------------------------------------------------------DATA LOAD STEP
states <- readOGR(dsn="../input/tempdir", layer="states")
library(tidyverse)
library(lubridate)
library(reshape2)
library(viridis)
library(ggthemes)
library(plotly)
library(maps)
library(formattable)
library(directlabels)
library(leaflet)
library(scales)
library(usmap)
library(rgdal)
library(sp)
library(gridExtra)
library(deSolve)
###################################
## Must update with data refresh ##
###################################
# This variable is referenced through the code, I found that the most recent data provided wasn't always complete
# therefore, setting this date will adjust the graphs and subsets throughout to use the most complete data availible
#---------------------------------------------------------------------------------------------DATE UPDATE
latest_date <- list(as.Date('2020-04-15'))
# Setting these colors for use in the formattable table below
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
customRed = "#ff7f7f"
customYel = "#C9C271"
#---------------------------------------------------------------------------------------------DATA LOAD STEP
#data <- read_csv("covid_19_data.csv")
data <- read_csv("~/Dropbox/ECON631/project_coronovirus/covid_19_data.csv")
#death.save <- read_csv("time_series_covid_19_deaths.csv")
#data.save <- read_csv("time_series_covid_19_confirmed.csv")
#us.data.save <- read_csv("time_series_covid_19_confirmed_US.csv")
#us.death.save <- read_csv("time_series_covid_19_deaths_US.csv")
data.save <- read_csv("~/Dropbox/ECON631/project_coronovirus/time_series_covid19_confirmed_global.csv")
death.save <- read_csv("~/Dropbox/ECON631/project_coronovirus/time_series_covid19_deaths_global.csv")
#
# us.data.save <- read_csv("../input/novel-corona-virus-2019-dataset/time_series_covid_19_confirmed_US.csv")
# us.death.save <- read_csv("../input/novel-corona-virus-2019-dataset/time_series_covid_19_deaths_US.csv")
# Sorry for the spaghetti code here, the data souces have changed a few times and this is getting out of control.
# Had an interesting time trying to subset the last column in a data set "if it looks stupid, but it works, it aint stupid..."
death.recent <- death.save[,c("Province/State","Country/Region","Lat","Long")]
lastcol <- death.save[tail(names(death.save), 1)]
colnames(lastcol)[1] <- "count"
death.recent$count <- lastcol$count
# repeating the same steps for the other data
data.recent <- data.save[,c("Province/State","Country/Region","Lat","Long")]
lastcol <- data.save[tail(names(data.save), 1)]
colnames(lastcol)[1] <- "count"
data.recent$count <- lastcol$count
# # Repeating again for the us death data
# us.death <- us.death.save[,c("Province_State")]
# lastcol <- us.death.save[tail(names(us.death.save), 1)]
# colnames(lastcol)[1] <- "count"
# us.death$count <- lastcol$count
#
# # Repeating again for the us data
# us.data <- us.data.save[,c("Province_State")]
# lastcol <- us.data.save[tail(names(us.data.save), 1)]
# colnames(lastcol)[1] <- "count"
# us.data$count <- lastcol$count
#---------------------------------------------------------------------------------------------DATA LOAD STEP
states <- readOGR(dsn="~/Dropbox/ECON631/project_coronovirus/input/tempdir", layer="states")
library(tidyverse)
library(lubridate)
library(reshape2)
library(viridis)
library(ggthemes)
library(plotly)
library(maps)
library(formattable)
library(directlabels)
library(leaflet)
library(scales)
library(usmap)
library(rgdal)
library(sp)
library(gridExtra)
library(deSolve)
###################################
## Must update with data refresh ##
###################################
# This variable is referenced through the code, I found that the most recent data provided wasn't always complete
# therefore, setting this date will adjust the graphs and subsets throughout to use the most complete data availible
#---------------------------------------------------------------------------------------------DATE UPDATE
latest_date <- list(as.Date('2020-04-15'))
# Setting these colors for use in the formattable table below
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
customRed = "#ff7f7f"
customYel = "#C9C271"
#---------------------------------------------------------------------------------------------DATA LOAD STEP
#data <- read_csv("covid_19_data.csv")
data <- read_csv("~/Dropbox/ECON631/project_coronovirus/covid_19_data.csv")
#death.save <- read_csv("time_series_covid_19_deaths.csv")
#data.save <- read_csv("time_series_covid_19_confirmed.csv")
#us.data.save <- read_csv("time_series_covid_19_confirmed_US.csv")
#us.death.save <- read_csv("time_series_covid_19_deaths_US.csv")
data.save <- read_csv("~/Dropbox/ECON631/project_coronovirus/time_series_covid19_confirmed_global.csv")
death.save <- read_csv("~/Dropbox/ECON631/project_coronovirus/time_series_covid19_deaths_global.csv")
#
# us.data.save <- read_csv("../input/novel-corona-virus-2019-dataset/time_series_covid_19_confirmed_US.csv")
# us.death.save <- read_csv("../input/novel-corona-virus-2019-dataset/time_series_covid_19_deaths_US.csv")
# Sorry for the spaghetti code here, the data souces have changed a few times and this is getting out of control.
# Had an interesting time trying to subset the last column in a data set "if it looks stupid, but it works, it aint stupid..."
death.recent <- death.save[,c("Province/State","Country/Region","Lat","Long")]
lastcol <- death.save[tail(names(death.save), 1)]
colnames(lastcol)[1] <- "count"
death.recent$count <- lastcol$count
# repeating the same steps for the other data
data.recent <- data.save[,c("Province/State","Country/Region","Lat","Long")]
lastcol <- data.save[tail(names(data.save), 1)]
colnames(lastcol)[1] <- "count"
data.recent$count <- lastcol$count
# # Repeating again for the us death data
# us.death <- us.death.save[,c("Province_State")]
# lastcol <- us.death.save[tail(names(us.death.save), 1)]
# colnames(lastcol)[1] <- "count"
# us.death$count <- lastcol$count
#
# # Repeating again for the us data
# us.data <- us.data.save[,c("Province_State")]
# lastcol <- us.data.save[tail(names(us.data.save), 1)]
# colnames(lastcol)[1] <- "count"
# us.data$count <- lastcol$count
#---------------------------------------------------------------------------------------------DATA LOAD STEP
# states <- readOGR(dsn="~/Dropbox/ECON631/project_coronovirus/input/tempdir", layer="states")
#states <- readOGR(dsn="tempdir", layer="states")
#########################
## Data New             #
#########################
data.save <- data
data <- data[,-c(1,3,5)]
data$`Country/Region` <- ifelse(grepl("Mainland China", data$`Country/Region`),'China',
ifelse(grepl("occupied Palestinian territory", data$`Country/Region`),'Palestine',
data$`Country/Region`))
###############
## Death Data #
###############
death <- subset(data, select = c(`Country/Region`, ObservationDate, Deaths))
colnames(death)[colnames(death)=="ObservationDate"] <- "date"
colnames(death)[colnames(death)=="Deaths"] <- "count"
# Because we're looking at total by country, I'm grouping all Provice/States together by country and date to get a sum total of each country:
death <- death %>%
group_by(`Country/Region`,date) %>%
summarise_all(list(sum))
########################
## Date Parse Function #
########################
datefunction <- function(df) {
# Date to char for parsing and conversion
df$date <- as.character(df$date)
# Parse the date
df$year<-sapply(df$date, function(x) as.numeric(strsplit(x,"/")[[1]][3]))
df$month<-sapply(df$date, function(x) as.numeric(strsplit(x,"/")[[1]][1]))
df$day<-sapply(df$date, function(x) as.numeric(strsplit(x,"/")[[1]][2]))
# Some years are "2020" some are "20" so this will set them all straight :)
df$year <- ifelse(df$year == '2020', "20", df$year)
# Put us back in the year 2000
df$year <- (as.numeric(df$year) + 2000)
# Reformat date into y-m-d
df$date<-as.Date(paste0(df$year,'-',df$month,'-',df$day), format="%Y-%m-%d")
# Add some weekdays for good measure
df$weekday <- weekdays(as.Date(df$date))
# Put weekdays in order
df$weekday <- ordered(df$weekday, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
df.date <<- df
return(df.date)
}
datefunction(death)
death <- df.date
##################
## Recovery Data #
##################
reco <- subset(data, select = c(`Country/Region`, ObservationDate, Recovered))
colnames(reco)[colnames(reco)=="ObservationDate"] <- "date"
colnames(reco)[colnames(reco)=="Recovered"] <- "count"
reco <- reco %>%
group_by(`Country/Region`,date) %>%
summarise_all(list(sum))
datefunction(reco)
reco <- df.date
#########################
## Confirmed Cases Data #
#########################
data <- subset(data, select = c(`Country/Region`, ObservationDate, Confirmed))
colnames(data)[colnames(data)=="ObservationDate"] <- "date"
colnames(data)[colnames(data)=="Confirmed"] <- "count"
data <- data %>%
group_by(`Country/Region`,date) %>%
summarise_all(list(sum))
datefunction(data)
data <- df.date
# Set X axis limits
time <- as.POSIXct(strptime(c("2020-01-22",latest_date), format = "%y-%m-%d"))
# Date to char for parsing and conversion
data$date <- as.character(data$date)
# Parse the date
data$year<-sapply(data$date, function(x) as.numeric(strsplit(x,"/")[[1]][3]))
data$month<-sapply(data$date, function(x) as.numeric(strsplit(x,"/")[[1]][1]))
data$day<-sapply(data$date, function(x) as.numeric(strsplit(x,"/")[[1]][2]))
# Some years are "2020" some are "20" so this will set them all straight :)
data$year <- ifelse(data$year == '2020', "20", data$year)
# Put us back in the year 2000
data$year <- (as.numeric(data$year) + 2000)
# Reformat date into y-m-d
data$date<-as.Date(paste0(data$year,'-',data$month,'-',data$day), format="%Y-%m-%d")
# Add some weekdays for good measure
data$weekday <- weekdays(as.Date(data$date))
# Put weekdays in order
data$weekday <- ordered(data$weekday, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# Import the Data Files
confirmed <- read.csv('time_series_covid19_confirmed_global.csv')
setwd("~/Dropbox/github/visulization/covid19")
library(here)
library(dplyr)
library(ggplot2)
library(reshape)
library(leaflet)
library(leaftime)
library(leaflet.extras)
library(gganimate)
library(highcharter)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
# Import the Data Files
confirmed <- read.csv('time_series_covid19_confirmed_global.csv')
# Import the Data Files
confirmed <- read.csv('time_series_covid19_confirmed_global.csv')
death <- read.csv('time_series_covid19_deaths_global.csv')
recovered <- read.csv('time_series_covid19_recovered_global.csv')
head(confirmed)
head(death)
head(recovered)
any(is.na(confirmed))
any(is.na(death))
any(is.na(recovered))
library(here)
library(dplyr)
library(ggplot2)
library(reshape)
library(leaflet)
library(leaftime)
library(leaflet.extras)
library(gganimate)
library(highcharter)
# Import the Data Files
confirmed <- read.csv('time_series_covid19_confirmed_global.csv')
death <- read.csv('time_series_covid19_deaths_global.csv')
recovered <- read.csv('time_series_covid19_recovered_global.csv')
head(confirmed)
head(death)
head(recovered)
any(is.na(confirmed))
any(is.na(death))
any(is.na(recovered))
trans_con <- confirmed %>% select("Country.Region",X4.16.20, "Lat", "Long") %>% group_by(Country.Region) %>% summarize(sum(X4.16.20))
colnames(trans_con)[names(trans_con) == "sum(X4.16.20)"] <- "total_confirm"
position <- confirmed %>% select("Country.Region", "Lat", "Long") %>% group_by(Country.Region) %>%
summarize(mean(Lat), mean(Long))
colnames(position)[names(position) == "mean(Lat)"] <- "Lat"
colnames(position)[names(position) == "mean(Long)"] <- "Long"
total <- melt(confirmed, id.vars = c("Province.State", "Country.Region", "Lat", "Long"))
colnames(total)[5] <- "Date"
colnames(total)[6] <- "Confirmed"
total$Date <- gsub("X", "0", total$Date)
total$Date <- as.Date(total$Date, format="%m.%d.%y")
rev_long <- melt(recovered, id.vars = c("Province.State", "Country.Region", "Lat", "Long"))
colnames(rev_long)[5] <- "Date"
colnames(rev_long)[6] <- "Recovered"
rev_long$Date <- gsub("X", "0", rev_long$Date)
rev_long$Date <- as.Date(rev_long$Date, format="%m.%d.%y")
dea_long <- melt(death, id.vars = c("Province.State", "Country.Region", "Lat", "Long"))
colnames(dea_long)[5] <- "Date"
colnames(dea_long)[6] <- "Death"
dea_long$Date <- gsub("X", "0", dea_long$Date)
dea_long$Date <- as.Date(dea_long$Date, format="%m.%d.%y")
total <- merge(total, dea_long, by = c('Province.State', 'Country.Region', 'Lat', 'Long', 'Date'))
total <- merge(total, rev_long, by = c('Province.State', 'Country.Region', 'Lat', 'Long', 'Date'))
total <- total%>% select('Province.State', 'Country.Region', 'Lat', 'Long','Date','Confirmed', 'Death', 'Recovered') %>% group_by(Country.Region, Date)%>%summarize(mean(Lat), mean(Long), sum(Confirmed), sum(Recovered), sum(Death))%>%ungroup()
names(total) <- c('Country.Region', 'Date', 'Lat', 'Long', 'Confirmed', 'Recovered', 'Death')
total$Lat[total$Country.Region == "France"]  <-  46.2276
total$Long[total$Country.Region == "France"]  <- 2.2137
every14days <- seq(
from = min(total$Date),
to = max(total$Date),
by = 14
)
# subset by every 14 days
Jan_22 <- total %>% filter(Date == every14days[1])
Feb_05 <- total %>% filter(Date == every14days[2])
Feb_19 <- total %>% filter(Date == every14days[3])
Mar_04 <- total %>% filter(Date == every14days[4])
Mar_18 <- total %>% filter(Date == every14days[5])
Apr_01 <- total %>% filter(Date == every14days[6])
Apr_15 <- total %>% filter(Date == every14days[7])
world_data <- total%>% select("Date", "Confirmed", "Recovered", "Death") %>%group_by(Date) %>% summarize(sum(Confirmed),sum(Recovered), sum(Death))
names(world_data) <- c('Date', "Confirmed", "Recovered","Death")
world_data <- as.data.frame(world_data)
world_data_long <- melt(world_data, id.vars = "Date")
names(world_data_long) <- c('Date', "Cases", "Number")
for (i in(1 : nrow(world_data))){
ifelse(i == 1, world_data$growth_rate[i] <- 0, ifelse(i == nrow(world_data), world_data$growth_rate[i] <- world_data$growth_rate[i-1], world_data$growth_rate[i] <- round((world_data$Confirmed[i+1] - world_data$Confirmed[i])/world_data$Confirmed[i],2)    ))
world_data$mortality[i]<- round(world_data$Death[i] / world_data$Confirmed[i],2)
world_data$recovered_rate[i]<- round(world_data$Recovered[i] / world_data$Confirmed[i],2)
}
world_trans <- world_data[,c(1,5,6,7)]
world_rate <- melt(world_trans, id.vars = "Date")
names(world_rate) <- c('Date', "Rate","Value")
leaflet() %>%
addProviderTiles("CartoDB") %>%
setView(lng = 0, lat = 10, zoom = 1.5) %>%
addCircleMarkers(
group = "22 Jan",
data = Jan_22,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(Confirmed + 1) * 1.3,
color = "#7b1230",
fillOpacity = ~ ifelse(Confirmed > 0, 0.8, 0),
stroke = FALSE,
label = ~ paste0(Country.Region,
'<br/>',"Confirmed: ", Confirmed,
'<br/>', ' Death: ', Death,
'<br/>',"Recovered: ", Recovered, sep = '<br/>') %>% lapply(htmltools::HTML),
popup = ~ paste0( Country.Region)
) %>%
addCircleMarkers(
group = "05 Feb",
data = Feb_05,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(Confirmed + 1) * 1.3,
color = "#7b1230",
fillOpacity = ~ ifelse(Confirmed > 0, 0.8, 0),
stroke = FALSE,
label = ~ paste0(Country.Region,
'<br/>',"Confirmed: ", Confirmed,
'<br/>', ' Death: ', Death,
'<br/>',"Recovered: ", Recovered, sep = '<br/>') %>% lapply(htmltools::HTML),
popup = ~ paste0( Country.Region)
) %>%
addCircleMarkers(
group = "19 Feb",
data = Feb_19,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(Confirmed + 1) * 1.3,
color = "#7b1230",
fillOpacity = ~ ifelse(Confirmed > 0, 0.8, 0),
stroke = FALSE,
label = ~ paste0(Country.Region,
'<br/>',"Confirmed: ", Confirmed,
'<br/>', ' Death: ', Death,
'<br/>',"Recovered: ", Recovered, sep = '<br/>') %>% lapply(htmltools::HTML),
popup = ~ paste0( Country.Region)
) %>%
addCircleMarkers(
group = "04 Mar",
data = Mar_04,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(Confirmed + 1)* 1.3,
color = "#7b1230",
fillOpacity = ~ ifelse(Confirmed > 0, 0.8, 0),
stroke = FALSE,
label = ~ paste0(Country.Region,
'<br/>',"Confirmed: ", Confirmed,
'<br/>', ' Death: ', Death,
'<br/>',"Recovered: ", Recovered, sep = '<br/>') %>% lapply(htmltools::HTML),
popup = ~ paste0( Country.Region)
) %>%
addCircleMarkers(
group = "18 Mar",
data = Mar_18,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(Confirmed + 1) *1.3,
color = "#7b1230",
fillOpacity = ~ ifelse(Confirmed > 0, 0.8, 0),
stroke = FALSE,
label = ~ paste0(Country.Region,
'<br/>',"Confirmed: ", Confirmed,
'<br/>', ' Death: ', Death,
'<br/>',"Recovered: ", Recovered, sep = '<br/>') %>% lapply(htmltools::HTML),
popup = ~ paste0( Country.Region)
) %>%
addCircleMarkers(
group = "01 Apr",
data = Apr_01,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(Confirmed + 1)* 1.3,
color = "#7b1230",
fillOpacity = ~ ifelse(Confirmed > 0, 0.8, 0),
stroke = FALSE,
label = ~ paste0(Country.Region,
'<br/>',"Confirmed: ", Confirmed,
'<br/>', ' Death: ', Death,
'<br/>',"Recovered: ", Recovered, sep = '<br/>') %>% lapply(htmltools::HTML),
popup = ~ paste0( Country.Region)
) %>%
addCircleMarkers(
group = "15 Apr",
data = Apr_15,
lng = ~ Long,
lat = ~ Lat,
radius = ~ log(Confirmed + 1)^1.3 ,
color = "#7b1230",
fillOpacity = ~ ifelse(Confirmed > 0, 0.8, 0),
stroke = FALSE,
label = ~ paste0(Country.Region,
'<br/>',"Confirmed: ", Confirmed,
'<br/>', ' Death: ', Death,
'<br/>',"Recovered: ", Recovered, sep = '<br/>') %>% lapply(htmltools::HTML),
popup = ~ paste0( Country.Region)
) %>%
addLayersControl(
baseGroups = c("22 Jan", "05 Feb", "19 Feb", "04 Mar", "18 Mar", "01 Apr", "15 Apr"),
position = "bottomleft",
options = layersControlOptions(collapsed = TRUE)
) %>%
addResetMapButton()
